version: '3.8'

services:
  # Multi-Tenant Service
  multi-tenant-service:
    build:
      context: ../
      dockerfile: docker/Dockerfile
    container_name: locodex-multi-tenant
    environment:
      # Database Configuration
      - MASTER_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/locodex_tenants
      - TENANT_DATABASE_TEMPLATE=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/tenant_{tenant_slug}
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - MASTER_ENCRYPTION_KEY=${MASTER_ENCRYPTION_KEY:-}
      
      # Service Configuration
      - HOST=0.0.0.0
      - PORT=8002
      - WORKERS=2
      - LOG_LEVEL=info
      - ENVIRONMENT=production
      
      # CORS and Security
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
      - TRUSTED_HOSTS=localhost,*.locodex.com
      
      # Storage
      - TENANT_STORAGE_BASE=/app/tenant_data
      
      # Database Connection Settings
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      - DB_MAX_RETRIES=3
      - DB_RETRY_DELAY=1
      
      # Token Settings
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
    
    ports:
      - "8002:8002"
    
    volumes:
      - tenant-data:/app/tenant_data
      - tenant-logs:/app/logs
    
    networks:
      - tenant-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database for Tenants
  postgres:
    image: postgres:15-alpine
    container_name: locodex-postgres-tenant
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=locodex_tenants
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    
    volumes:
      - postgres-tenant-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    networks:
      - tenant-network
    
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d locodex_tenants"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: locodex-redis-tenant
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword} --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-defaultpassword}
    
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    
    volumes:
      - redis-tenant-data:/data
    
    networks:
      - tenant-network
    
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-defaultpassword}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Database Migration Service (runs once)
  migration:
    build:
      context: ../
      dockerfile: docker/Dockerfile
    container_name: locodex-tenant-migration
    environment:
      - MASTER_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/locodex_tenants
    
    volumes:
      - ../:/app
    
    networks:
      - tenant-network
    
    depends_on:
      postgres:
        condition: service_healthy
    
    command: python -c "
      from database.config import db_manager;
      from database.models import Base;
      print('Running database migrations...');
      Base.metadata.create_all(db_manager.master_engine);
      print('Migrations completed successfully!')
      "
    
    profiles:
      - migration  # Only run with --profile migration

  # Admin Dashboard (Optional)
  admin-dashboard:
    image: nginx:alpine
    container_name: locodex-tenant-admin
    ports:
      - "8003:80"
    
    volumes:
      - ./admin-dashboard:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    
    networks:
      - tenant-network
    
    depends_on:
      - multi-tenant-service
    
    restart: unless-stopped
    
    profiles:
      - admin  # Only run with --profile admin

volumes:
  postgres-tenant-data:
    driver: local
  redis-tenant-data:
    driver: local
  tenant-data:
    driver: local
  tenant-logs:
    driver: local

networks:
  tenant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.name: tenant-br0