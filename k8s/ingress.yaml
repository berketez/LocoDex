---
# Main Ingress for LocoDex Platform
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: locodex-ingress
  namespace: locodex
  annotations:
    # Nginx Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:;" always;
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS settings
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    
    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "locodex-deepsearch"
    
    # Load balancing
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # SSL Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    
spec:
  tls:
  - hosts:
    - locodex.local
    - api.locodex.local
    - monitoring.locodex.local
    secretName: locodex-tls
  
  rules:
  # Main application domain
  - host: locodex.local
    http:
      paths:
      # Main frontend (served by nginx)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: locodex-nginx
            port:
              number: 80
      
      # AI Agent API
      - path: /api/agent
        pathType: Prefix
        backend:
          service:
            name: locodex-ai-agent
            port:
              number: 3001
      
      # Deep Research API
      - path: /api/research
        pathType: Prefix
        backend:
          service:
            name: locodex-deep-research
            port:
              number: 8001
      
      # DeepSearch API
      - path: /api/deepsearch
        pathType: Prefix
        backend:
          service:
            name: locodex-deepsearch
            port:
              number: 5000
      
      # DeepSearch WebSocket
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: locodex-deepsearch
            port:
              number: 5001
      
      # Health checks
      - path: /health
        pathType: Exact
        backend:
          service:
            name: locodex-nginx
            port:
              number: 80
  
  # API subdomain for external integrations
  - host: api.locodex.local
    http:
      paths:
      # AI Agent API
      - path: /agent
        pathType: Prefix
        backend:
          service:
            name: locodex-ai-agent
            port:
              number: 3001
      
      # Deep Research API
      - path: /research
        pathType: Prefix
        backend:
          service:
            name: locodex-deep-research
            port:
              number: 8001
      
      # DeepSearch API
      - path: /deepsearch
        pathType: Prefix
        backend:
          service:
            name: locodex-deepsearch
            port:
              number: 5000
      
      # MinIO Object Storage API
      - path: /storage
        pathType: Prefix
        backend:
          service:
            name: locodex-minio
            port:
              number: 9000
  
  # Monitoring subdomain
  - host: monitoring.locodex.local
    http:
      paths:
      # Grafana Dashboard
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: locodex-grafana
            port:
              number: 3000
      
      # Prometheus Metrics
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: locodex-prometheus
            port:
              number: 9090
      
      # Jaeger Tracing
      - path: /jaeger
        pathType: Prefix
        backend:
          service:
            name: locodex-jaeger
            port:
              number: 16686
      
      # Flower Celery Monitoring
      - path: /flower
        pathType: Prefix
        backend:
          service:
            name: locodex-flower
            port:
              number: 5555
      
      # MinIO Console
      - path: /minio
        pathType: Prefix
        backend:
          service:
            name: locodex-minio
            port:
              number: 9001

---
# Network Policy for securing ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: locodex-ingress-policy
  namespace: locodex
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 3001
    - protocol: TCP
      port: 5000
    - protocol: TCP
      port: 5001
    - protocol: TCP
      port: 8001
  egress:
  - {}

---
# HorizontalPodAutoscaler for AI Agent
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: locodex-ai-agent-hpa
  namespace: locodex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: locodex-ai-agent
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HorizontalPodAutoscaler for Deep Research Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: locodex-deep-research-hpa
  namespace: locodex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: locodex-deep-research
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---
# HorizontalPodAutoscaler for Celery Workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: locodex-celery-worker-hpa
  namespace: locodex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: locodex-celery-worker
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80