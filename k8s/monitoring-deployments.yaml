---
# Nginx API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locodex-nginx
  namespace: locodex
  labels:
    app: locodex-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: locodex-nginx
  template:
    metadata:
      labels:
        app: locodex-nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: tls-certs
          mountPath: /etc/nginx/ssl
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: tls-certs
        secret:
          secretName: locodex-tls
      restartPolicy: Always
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locodex-prometheus
  namespace: locodex
  labels:
    app: locodex-prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locodex-prometheus
  template:
    metadata:
      labels:
        app: locodex-prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data-pvc
      restartPolicy: Always
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locodex-grafana
  namespace: locodex
  labels:
    app: locodex-grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locodex-grafana
  template:
    metadata:
      labels:
        app: locodex-grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: locodex-secrets
              key: grafana-admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          valueFrom:
            configMapKeyRef:
              name: locodex-config
              key: GF_USERS_ALLOW_SIGN_UP
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            configMapKeyRef:
              name: locodex-config
              key: GF_SECURITY_ADMIN_USER
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: locodex-secrets
              key: grafana-secret-key
        - name: GF_SECURITY_COOKIE_SECURE
          valueFrom:
            configMapKeyRef:
              name: locodex-config
              key: GF_SECURITY_COOKIE_SECURE
        - name: GF_SECURITY_COOKIE_SAMESITE
          valueFrom:
            configMapKeyRef:
              name: locodex-config
              key: GF_SECURITY_COOKIE_SAMESITE
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data-pvc
      restartPolicy: Always
---
# Jaeger Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locodex-jaeger
  namespace: locodex
  labels:
    app: locodex-jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locodex-jaeger
  template:
    metadata:
      labels:
        app: locodex-jaeger
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:latest
        ports:
        - containerPort: 16686
        - containerPort: 14268
        env:
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always
---
# Flower Deployment (Celery Monitoring)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locodex-flower
  namespace: locodex
  labels:
    app: locodex-flower
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locodex-flower
  template:
    metadata:
      labels:
        app: locodex-flower
    spec:
      containers:
      - name: flower
        image: locodex/deepsearch:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5555
        command:
        - celery
        - -A
        - src.services.deepsearch.core
        - flower
        - --port=5555
        env:
        - name: CELERY_BROKER_URL
          valueFrom:
            configMapKeyRef:
              name: locodex-config
              key: CELERY_BROKER_URL
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            configMapKeyRef:
              name: locodex-config
              key: CELERY_RESULT_BACKEND
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 300m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /
            port: 5555
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 5555
          initialDelaySeconds: 10
          periodSeconds: 5
      restartPolicy: Always
---
# MinIO Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locodex-minio
  namespace: locodex
  labels:
    app: locodex-minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locodex-minio
  template:
    metadata:
      labels:
        app: locodex-minio
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        ports:
        - containerPort: 9000
        - containerPort: 9001
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: locodex-secrets
              key: minio-access-key
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: locodex-secrets
              key: minio-secret-key
        command:
        - server
        - /data
        - --console-address
        - ":9001"
        volumeMounts:
        - name: minio-data
          mountPath: /data
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: minio-data
        persistentVolumeClaim:
          claimName: minio-data-pvc
      restartPolicy: Always