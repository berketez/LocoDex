
services:
  # AI Agent Service
  ai-agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.ai-agent
    container_name: locodex-ai-agent
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - API_PORT=3001
      - LOG_LEVEL=info
      - OLLAMA_HOST=host.docker.internal:11434
      - LMSTUDIO_HOST=host.docker.internal:1234
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ai-agent-temp:/app/temp
    networks:
      - locodex-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Sandbox Service
  sandbox:
    build:
      context: .
      dockerfile: docker/Dockerfile.sandbox
    container_name: locodex-sandbox
    # PORTS COMPLETELY REMOVED FOR SECURITY - NO EXTERNAL ACCESS
    # NO PORT EXPOSURE WHATSOEVER
    environment:
      - SANDBOX_MODE=true
      - EXECUTION_TIMEOUT=30
      - MAX_MEMORY=128m  # Reduced for security
      - MAX_CPU=0.25     # Reduced for security
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=
    # NO VOLUME MOUNTS - COMPLETELY ISOLATED FILESYSTEM
    # ULTRA-SECURE NETWORK ISOLATION - NO INTERNET ACCESS
    networks:
      - sandbox-isolated-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
          pids: 50
        reservations:
          cpus: '0.25'
          memory: 512M
    security_opt:
      - no-new-privileges:true
      - seccomp:/app/seccomp-profile.json
      - apparmor:docker-default
    user: "1000:1000"
    cap_drop:
      - ALL
    # Minimal capabilities - only what's absolutely necessary
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
    read_only: true
    tmpfs:
      - /home/sandbox/.local:rw,nosuid,nodev,noexec,relatime,size=50m,uid=1000,gid=1000
      - /home/sandbox/workspace:rw,nosuid,nodev,noexec,relatime,size=100m,uid=1000,gid=1000
      - /tmp:rw,noexec,nosuid,nodev,relatime,size=50m,uid=1000,gid=1000
      - /var/tmp:rw,noexec,nosuid,nodev,relatime,size=10m,uid=1000,gid=1000
    ulimits:
      nproc: 64
      nofile:
        soft: 256
        hard: 512
      fsize: 10485760  # 10MB
      cpu: 30  # 30 seconds
      data: 134217728  # 128MB
    cpu_quota: 50000  # 50% CPU limit
    mem_swappiness: 0
    oom_kill_disable: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: locodex-api-gateway
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - locodex-network
    depends_on:
      ai-agent:
        condition: service_healthy
      sandbox:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: locodex-redis
    # Remove external port exposure for security
    # ports:
    #   - "6379:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - locodex-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    command: sh -c 'redis-server /usr/local/etc/redis/redis.conf --requirepass "$${REDIS_PASSWORD:-default_insecure_password}"'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-default_insecure_password}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-default_insecure_password}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: locodex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - locodex-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: locodex-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - locodex-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-CHANGE_THIS_INSECURE_DEFAULT}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_SECRET_KEY=${GF_SECURITY_SECRET_KEY:-CHANGE_THIS_SECRET_KEY}
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    profiles:
      - monitoring

  deep-research-service:
    build:
      context: ./src/services/deep_research_service
      dockerfile: Dockerfile
    container_name: locodex-deep-research
    environment:
      - OLLAMA_HOST=http://host.docker.internal:11434
      - LMSTUDIO_HOST=http://host.docker.internal:1234
      - PYTHONUNBUFFERED=1
      - LOCAL_MODE=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-default_insecure_password}
    ports:
      - "8001:8001"
    volumes:
      - ./research_results:/app/research_results
    networks:
      - locodex-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '0.5'
          memory: 2G

volumes:
  ai-agent-temp:
    driver: local
  sandbox-workspace:
    driver: local
  sandbox-temp:
    driver: local
  nginx-cache:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  locodex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: locodex-br0
  
  # ISOLATED NETWORK FOR SANDBOX - NO INTERNET ACCESS
  sandbox-isolated-network:
    driver: bridge
    internal: true  # CRITICAL: No external connectivity
    ipam:
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: sandbox-br0
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication
      com.docker.network.bridge.enable_ip_masquerade: "false"  # No NAT
      com.docker.network.bridge.enable_ip_forwarding: "false"  # No IP forwarding
      com.docker.network.driver.mtu: 1500
      # Additional security options
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"  # Bind to localhost only
      com.docker.network.enable_ipv6: "false"  # Disable IPv6

